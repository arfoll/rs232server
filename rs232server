#!/usr/bin/env python3

# Copyright (C) 2011-2020 Brendan Le Foll <brendan@fridu.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import dbus
import importlib
import logging
import os
import re
import sys
import yaml

from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GLib
import rs232modules.Shared
from rs232modules.BaseService import invalidtty
from rs232modules.Mqtt import comm

LOG_FILENAME = '/tmp/' + rs232modules.Shared.APP_NAME + '.log'
LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
RS232SERVER_BUS_NAME = 'uk.co.madeo.' + rs232modules.Shared.APP_NAME
DESCRIPTION = 'Listen over dbus for commands to be sent over RS232'

rs232_services = {}

def configureLogging(verbose, dev, logger):
  if dev:
    logger.setLevel(logging.DEBUG)
  else:
    logger.setLevel(logging.INFO)
  formatter = logging.Formatter(LOG_FORMAT)
  try:
    fh = logging.FileHandler(LOG_FILENAME)
  except:
    print('Check you have write permissions to', LOG_FILENAME)
    exit(1)
  fh.setLevel(logging.DEBUG)
  fh.setFormatter(formatter)
  logger.addHandler(fh)
  ch = logging.StreamHandler()
  if verbose:
    ch.setLevel(logging.DEBUG)
  else:
    ch.setLevel(logging.ERROR)
  ch.setFormatter(formatter)
  logger.addHandler(ch)

def mqtt_msg_handler(topic, payload):
  # TODO: Fix logger
  cmd = payload.decode('utf8')
  print(f'Topic = {topic}, Message = {cmd}')

  m = re.search('rs232server/(.+?)/cmd', topic)
  if m:
    service = m.group(1)
    rs232_services[service].send_cmd(cmd, 1, False)
    print(f'Service {service} called')
  else:
    print('service error')

def loadConfiguration(configfile, logger):
  cfg = None

  with open(configfile, 'r') as stream:
    cfg = yaml.safe_load(stream)
    logger.debug('using config file: %s', configfile)

  return cfg

def main():
  # parse CLI arguments
  parser = argparse.ArgumentParser(description=DESCRIPTION)
  parser.add_argument('--verbose', '-v', action='store_true', dest='verbose', default=False,
                      help='enables more verbose output')
  parser.add_argument('--dev', '-d', action='store_true', dest='dev', default=False,
                      help='development mode disables some commands that could be dangerous. Read documentation before using')
  parser.add_argument('--conf', '-c', action='store_true', dest='configfile', default='rs232.conf.example',
                      help='path to configuration file')
  args = parser.parse_args()

  # set up logging
  logger = logging.getLogger(rs232modules.Shared.APP_NAME)
  configureLogging(args.verbose, args.dev, logger)

  # read configuration
  cfg = loadConfiguration(args.configfile, logger)

  # Dbus is actually mandatory
  if 'dbus' in cfg['comm']:
    # start dbus mainloop
    DBusGMainLoop(set_as_default=True)
    try:
      bus_name = dbus.service.BusName(RS232SERVER_BUS_NAME, bus=dbus.SystemBus())
    except:
      logger.info(sys.exc_info()[0])
      logger.error('fatal dbus error: have you set up a dbus config?')
      exit(1)

  for servicename in cfg['modules']:
      service = cfg['modules'][servicename]
      try:
        tty = service['tty']
        logger.debug('service is %s', servicename)
        x = getattr(importlib.import_module('rs232modules.' + servicename), servicename)
        rs232_services[servicename] = x(tty, bus_name)
      except invalidtty as e:
        logger.error('%s', str(e))
        exit(1)
      except:
        logger.debug(sys.exc_info())
        logger.error('Check that %s is a valid service name', servicename)
        exit(1)

  if 'mqtt' in cfg['comm']:
    client = comm(cfg['comm']['mqtt']['brocker'])

    logger.debug(rs232_services)
    for service in rs232_services:
      logger.debug('subscribing to: rs232server/'+service+'/cmd')
      client.register_handler('rs232server/'+service+'/cmd', service, mqtt_msg_handler)

  loop = GLib.MainLoop()
  loop.run()

if __name__ == '__main__':
    sys.exit(main())
