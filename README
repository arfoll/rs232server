INTRO

The Cambridge Audio Azur series HDMI receivers (it seems pre HDMI receivers do not have them) have RS232 serial ports that can be used to control most if not all of the functionality. After doing the work on Azur receivers, I started working on controlling my LG TV and later a Pioneer TV that was lying around at work. If interested in doing some coding, read HACKING

COMPATIBILITY

rs232server splits hardware support into loadable modules. I've listed the hardware I've used the modules on and hardware I believe they should work on:

Azur Service:
Azur 340R (tested on SW version 1.3, protocol version 1.1)
Azur 540R version 3 (untested but assumed to work)
Azur 640R (tested on SW version 1.5, protocol version 1.0)
Azur 650R (unknown but basic protocol appears unchanged from doc)
Azur 551R (unknown but has rs232 port)

Lgtv Service:
LG M2762DP (UK model)

Pioneer Service:
KRL-32V

Arcam Service:
Unknown

Personally I use the 340R (upstairs) and 640R (downstairs). The 340R uses miniclient with a bash script and the HTPC with the 640R uses the xbmc plugin. Both systems are fairly reliable, and I run git HEAD. Please send me any issues/improvements/comments you may have! I'd love to hear if you are using the SW even if you disliked it ;-)

PROGRAM

The program runs in two parts. A python daemon runs in the background and responds to queries from the cli using dbus.
The hope is to decouple the two sufficiently so that other clients can be written. The hope is to eventually have the script
listening to the users media player in order to switch on when neccessary, replace alsa as the volume controller, etc...

INSTALL

Just like a standard python module use:
sudo ./setup.py install
or to install it locally, use:
./setup.py install --user

The script requires python2, python-pyserial and dbus

To connect the Amplifier (Azur 340R), use a null modem cable to a serial port or USB->serial controller

USE
The ampserver can be started like any python program just run ./ampserver.py. Run ./ampserver.py --help for further info. A tty can be set if ttyUSB0 is not what your amplifier is connected to.

You will need to place rs232.conf in /etc and configure the correct ttys for the services. To disable a service simply comment out the service in the .conf

The ampserver has 3 modes of operation. One is with the cli application provided which also serves as a reference dbus client implementation. Provided with a simple argument it will execute a command using the ampserver over dbus. See ./ampclient.py --help

Also provided is an xbmc (eden/11.x) service addon (see http://github.com/arfoll/script.madeo.ampserver)

THANKS
Tom Carlson - original creator of the python script to control Azur 340R
Jon Smith - blog post on lgtv serial communication
Suan-Aik Yeo - developer of libLGTV_serial where I get most of my lgtv commands from
Sander Jongeleen - creating & testing arcam service
